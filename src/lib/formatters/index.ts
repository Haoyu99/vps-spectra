import {formatNetworkReturnAsMarkdownTable} from '@/lib/parsers/networkReturnParser'
import type {VpsTestResult, MarkdownOptions, RatingResult} from '@/types'

/**
 * Â∞ÜVPSÊµãËØïÁªìÊûúÊ†ºÂºèÂåñ‰∏∫Markdown
 */
export function formatToMarkdown(result: VpsTestResult, options: MarkdownOptions = {
    useObsidianCallouts: true,
    includeMetadata: true,
    includeTableOfContents: true,
    compactMode: false
}, inputText: string = ''): string {
    let markdown = ''

    // Ê†áÈ¢òÂíåÂÖÉÊï∞ÊçÆ
    markdown += generateHeader(result, options)

    // ÁõÆÂΩï ÊöÇÊó∂‰∏çÂä†ÂÖ•
    // if (options.includeTableOfContents) {
    //     markdown += generateTableOfContents()
    // }

    // Âü∫Á°Ä‰ø°ÊÅØ
    markdown += generateBasicInfo(result.basicInfo, options)

    // Á°¨‰ª∂ÊÄßËÉΩÊµãËØï
    markdown += generateHardwareTests(result, options)

    // ÊµÅÂ™í‰ΩìËß£ÈîÅÊµãËØï
    markdown += generateStreamingTests(result.streamingTest, options)

    // ÁΩëÁªúÊµãËØï
    markdown += generateNetworkTests(result, options)

    // ÈÄüÂ∫¶ÊµãËØï
    markdown += generateSpeedTests(result.speedTest, options)

    // È°µËÑö
    markdown += generateFooter(result, options)

    return markdown
}

/**
 * ÁîüÊàêÊñáÊ°£Â§¥ÈÉ®
 */
function generateHeader(result: VpsTestResult, options: MarkdownOptions): string {
    let header = '# üöÄ VPS ÊÄßËÉΩÊµãËØïÊä•Âëä\n\n'

    if (options.includeMetadata) {
        if (options.useObsidianCallouts) {
            header += `> [!info] ÊµãËØï‰ø°ÊÅØ\n`
            header += `> **ÊµãËØïÊó∂Èó¥Ôºö** ${result.metadata.version}\n`
            header += `> **ÊµãËØïËÄóÊó∂Ôºö** ${result.metadata.totalDuration}\n`
            header += `> **ÊúçÂä°Âô®ËøêË°åÊó∂Èó¥Ôºö** ${result.metadata.testTime}\n\n`
        } else {
            header += `**ÊµãËØïÊó∂Èó¥Ôºö** ${result.metadata.version} \n`
            header += `**ÊµãËØïËÄóÊó∂Ôºö** ${result.metadata.totalDuration} \n`
            header += `**ÊúçÂä°Âô®ËøêË°åÊó∂Èó¥Ôºö** ${result.metadata.testTime} \n\n`
        }
    }

    return header
}

/**
 * ÁîüÊàêÁõÆÂΩï
 */
function generateTableOfContents(): string {
    return `## üìã ÁõÆÂΩï

- [üìä Âü∫Á°Ä‰ø°ÊÅØ](#-Âü∫Á°Ä‰ø°ÊÅØ)
- [üíª Á°¨‰ª∂ÊÄßËÉΩÊµãËØï](#-Á°¨‰ª∂ÊÄßËÉΩÊµãËØï)
  - [CPU ÊµãËØï](#cpu-ÊµãËØï)
  - [ÂÜÖÂ≠òÊµãËØï](#ÂÜÖÂ≠òÊµãËØï)
  - [Á£ÅÁõòÊÄßËÉΩÊµãËØï](#Á£ÅÁõòÊÄßËÉΩÊµãËØï)
- [üé¨ ÊµÅÂ™í‰ΩìËß£ÈîÅÊµãËØï](#-ÊµÅÂ™í‰ΩìËß£ÈîÅÊµãËØï)
- [üåê ÁΩëÁªúÊµãËØï](#-ÁΩëÁªúÊµãËØï)
  - [IP Ë¥®ÈáèÊ£ÄÊµã](#ip-Ë¥®ÈáèÊ£ÄÊµã)
  - [ÈÇÆ‰ª∂Á´ØÂè£Ê£ÄÊµã](#ÈÇÆ‰ª∂Á´ØÂè£Ê£ÄÊµã)
  - [‰∏âÁΩëÂõûÁ®ã](#‰∏âÁΩëÂõûÁ®ã)
  - [ÂõûÁ®ãË∑ØÁî±](#ÂõûÁ®ãË∑ØÁî±)
- [‚ö° ÈÄüÂ∫¶ÊµãËØï](#-ÈÄüÂ∫¶ÊµãËØï)

---

`
}


/**
 * ÁîüÊàêÂü∫Á°Ä‰ø°ÊÅØÈÉ®ÂàÜ
 */
function generateBasicInfo(basicInfo: any, options: MarkdownOptions): string {
    // 1. Ê∑ªÂä†ÂºïÂØºÊÄß Callout
    let section = '## üìä Âü∫Á°Ä‰ø°ÊÅØ\n\n'

    section += '> [!NOTE] Á°¨‰ª∂ÈÖçÁΩÆ & ÁΩëÁªú‰ø°ÊÅØ\n';
    section += '> ËøôÊòØÂÖ≥‰∫éÊúçÂä°Âô®Ê†∏ÂøÉÁ°¨‰ª∂„ÄÅÊìç‰ΩúÁ≥ªÁªü‰ª•ÂèäÁΩëÁªúÁéØÂ¢ÉÁöÑÂü∫Á°Ä‰ø°ÊÅØÊ¶ÇËßà„ÄÇ\n\n';

    // 2. ÂàÜÁªÑ‰∏ÄÔºöÁ°¨‰ª∂ËßÑÊ†º
    section += '### üíª Á°¨‰ª∂ËßÑÊ†º\n';
    section += '| È°πÁõÆ | ËØ¶ÊÉÖ |\n';
    section += '| :--- | :--- |\n';
    section += `| **CPU ÂûãÂè∑** | ${basicInfo.cpuModel} |\n`;
    section += `| **CPU Ê†∏ÂøÉ** | ${basicInfo.cpuCores} Cores @ ${basicInfo.cpuFreq} |\n`;
    section += `| **CPU ÁºìÂ≠ò** | L1: ${basicInfo.cpuCache.l1} / L2: ${basicInfo.cpuCache.l2} / L3: ${basicInfo.cpuCache.l3} |\n`;
    section += `| **ËôöÊãüÂåñ** | ${basicInfo.vmSupport ? '‚úÖ KVM/VM-x' : '‚ùå ‰∏çÊîØÊåÅ'} |\n`;
    section += `| **AES-NI** | ${basicInfo.aesNI ? '‚úÖ Â∑≤ÂêØÁî®' : '‚ùå Êú™ÂêØÁî®'} |\n`;
    section += `| **ÂÜÖÂ≠ò** | ${basicInfo.memory.used} / ${basicInfo.memory.total} |\n`;
    // ‰ºòÂåñ Swap ÊòæÁ§∫
    const swapDisplay = basicInfo.swap.includes('no swap') ? 'Êú™ÈÖçÁΩÆ' : basicInfo.swap;
    section += `| **Swap** | ${swapDisplay} |\n`;
    section += `| **Á°¨Áõò** | ${basicInfo.disk.used} / ${basicInfo.disk.total} |\n\n`;

    // 3. ÂàÜÁªÑ‰∫åÔºöÁ≥ªÁªü‰ø°ÊÅØ
    section += '### ‚öôÔ∏è Á≥ªÁªü‰ø°ÊÅØ\n';
    section += '| È°πÁõÆ | ËØ¶ÊÉÖ |\n';
    section += '| :--- | :--- |\n';
    section += `| **Êìç‰ΩúÁ≥ªÁªü** | ${basicInfo.system} |\n`;
    section += `| **Êû∂ÊûÑ** | ${basicInfo.arch} |\n`;
    section += `| **ÂÜÖÊ†∏ÁâàÊú¨** | ${basicInfo.kernel} |\n`;
    section += `| **TCP Âä†ÈÄü** | ${basicInfo.tcpAcceleration} |\n`;
    section += `| **Âú®Á∫øÊó∂Èó¥** | ${basicInfo.uptime} |\n`;
    section += `| **Á≥ªÁªüË¥üËΩΩ** | ${basicInfo.load.join(', ')} |\n\n`;

    // 4. ÂàÜÁªÑ‰∏âÔºöÁΩëÁªúÈÖçÁΩÆ
    section += '### üåê ÁΩëÁªúÈÖçÁΩÆ\n';
    section += '| È°πÁõÆ | ËØ¶ÊÉÖ |\n';
    section += '| :--- | :--- |\n';
    section += `| **ËôöÊãüÂåñÊû∂ÊûÑ** | ${basicInfo.virtualization} |\n`;
    section += `| **NAT Á±ªÂûã** | ${basicInfo.natType} |\n`;
    section += `| **IPv4 ‰ø°ÊÅØ** | ${basicInfo.ipv4.location} (${basicInfo.ipv4.asn}) |\n`;
    section += `| **IPv6 ‰ø°ÊÅØ** | ${basicInfo.ipv6.location} (${basicInfo.ipv6.asn}) |\n`;
    section += `| **IPv6 Â≠êÁΩë** | ${basicInfo.ipv6.subnet} |\n\n`;

    return section
}

/**
 * ÁîüÊàêÁ°¨‰ª∂ÊÄßËÉΩÊµãËØïÈÉ®ÂàÜ
 */
function generateHardwareTests(result: VpsTestResult, options: MarkdownOptions): string {
    let section = '## üíª Á°¨‰ª∂ÊÄßËÉΩÊµãËØï\n\n'

    // CPUÊµãËØï
    section += '### CPU ÊµãËØï\n\n'
    section += generateCpuTestSection(result.cpuTest, options)

    // ÂÜÖÂ≠òÊµãËØï
    section += '### ÂÜÖÂ≠òÊµãËØï\n\n'
    section += generateMemoryTestSection(result.memoryTest, options)

    // Á£ÅÁõòÊµãËØï
    section += '### Á£ÅÁõòÊÄßËÉΩÊµãËØï\n\n'
    section += generateDiskTestSection(result.diskDdTest, result.diskFioTest, options)

    return section
}

/**
 * ÁîüÊàêCPUÊµãËØïÈÉ®ÂàÜ
 */
function generateCpuTestSection(cpuTest: any, options: MarkdownOptions): string {
    let section = ''

    // ÂçïÊ†∏ÊÄßËÉΩ
    section += `**ÂçïÊ†∏ÊÄßËÉΩÂæóÂàÜÔºö** ${cpuTest.singleCore.score} Scores\n\n`
    section += generateRatingCallout(cpuTest.singleCore.rating, 'ÂçïÊ†∏ÊÄßËÉΩËØÑÁ∫ß', options)

    // Â§öÊ†∏ÊÄßËÉΩ
    // TODO: ÂçïÊ†∏ÁöÑÊó∂ÂÄô Ê≠§Â§ÑÁúÅÁï•
    section += `**${cpuTest.multiCore.threads}Á∫øÁ®ãÊÄßËÉΩÂæóÂàÜÔºö** ${cpuTest.multiCore.score} Scores\n\n`
    section += generateRatingCallout(cpuTest.multiCore.rating, 'Â§öÊ†∏ÊÄßËÉΩËØÑÁ∫ß', options)

    // Â§öÊ†∏ÊïàÁéá
    if (cpuTest.multiCore.efficiency && cpuTest.multiCore.efficiencyRating) {
        section += `**Â§öÊ†∏ÂøÉÊïàÁéáÔºö** ${cpuTest.multiCore.efficiency.toFixed(2)}\n\n`
        section += generateRatingCallout(cpuTest.multiCore.efficiencyRating, 'ÊïàÁéáËØÑÁ∫ß', options)
    }

    return section
}

/**
 * ÁîüÊàêÂÜÖÂ≠òÊµãËØïÈÉ®ÂàÜ
 */
function generateMemoryTestSection(memoryTest: any, options: MarkdownOptions): string {
    let section = ''

    section += '| ÊµãËØïÁ±ªÂûã | ÊÄßËÉΩ | ËØÑÁ∫ß |\n'
    section += '| --- | --- | --- |\n'
    section += `| ÂçïÁ∫øÁ®ãËØªÊµãËØï | ${memoryTest.singleThreadRead.speed.toFixed(2)} MB/s | ${memoryTest.singleThreadRead.rating.emoji} ${memoryTest.singleThreadRead.rating.description} |\n`
    section += `| ÂçïÁ∫øÁ®ãÂÜôÊµãËØï | ${memoryTest.singleThreadWrite.speed.toFixed(2)} MB/s | ${memoryTest.singleThreadWrite.rating.emoji} ${memoryTest.singleThreadWrite.rating.description} |\n\n`

    // ÂÜÖÂ≠òÊÄßËÉΩÊÄª‰ΩìËØÑ‰ª∑
    const avgRating = getAverageRating([memoryTest.singleThreadRead.rating, memoryTest.singleThreadWrite.rating])
    if (options.useObsidianCallouts) {
        section += generateMemoryPerformanceCallout(memoryTest, avgRating, options)
    }

    return section
}

/**
 * ÁîüÊàêÁ£ÅÁõòÊµãËØïÈÉ®ÂàÜ
 */
function generateDiskTestSection(diskDdTest: any, diskFioTest: any, options: MarkdownOptions): string {
    let section = ''

    // DDÊµãËØï
    section += '#### DD ËØªÂÜôÊµãËØï\n\n'
    section += '```\n'
    for (const test of diskDdTest.tests) {
        section += `${test.operation}\n`
        if (test.writeSpeed && test.readSpeed) {
            section += `ÂÜôÂÖ•: ${test.writeSpeed}${test.writeIOPS ? ` (${test.writeIOPS})` : ''}\n`
            section += `ËØªÂèñ: ${test.readSpeed}${test.readIOPS ? ` (${test.readIOPS})` : ''}\n`
        }
        section += '\n'
    }
    section += '```\n\n'

    // FIOÊµãËØï
    section += '#### FIO ËØªÂÜôÊµãËØï\n\n'
    if (diskFioTest.tests.length > 0) {
        section += '```\n'
        section += 'Block Size | Read (IOPS) | Write (IOPS) | Total (IOPS)\n'
        section += '---------- | ----------- | ------------ | ------------\n'
        for (const test of diskFioTest.tests) {
            section += `${test.blockSize} | ${test.read.speed.toFixed(2)} MB/s (${test.read.iops.toFixed(0)}) | `
            section += `${test.write.speed.toFixed(2)} MB/s (${test.write.iops.toFixed(0)}) | `
            section += `${test.total.speed.toFixed(2)} MB/s (${test.total.iops.toFixed(0)})\n`
        }
        section += '```\n\n'

        // FIOÊµãËØïÊÄªÁªì
        section += '**FIO ÊµãËØïÊÄªÁªì**\n\n'
        section += '| Êìç‰ΩúÁ±ªÂûã | Âπ≥ÂùáÈÄüÂ∫¶ | ËØÑÁ∫ß |\n'
        section += '| --- | --- | --- |\n'
        section += `| ËØªÂèñ | ${diskFioTest.summary.avgReadSpeed.toFixed(2)} MB/s | ${diskFioTest.summary.readRating.emoji} ${diskFioTest.summary.readRating.description} |\n`
        section += `| ÂÜôÂÖ• | ${diskFioTest.summary.avgWriteSpeed.toFixed(2)} MB/s | ${diskFioTest.summary.writeRating.emoji} ${diskFioTest.summary.writeRating.description} |\n\n`
    }

    return section
}

/**
 * ÁîüÊàêÊµÅÂ™í‰ΩìÊµãËØïÈÉ®ÂàÜ
 */
function generateStreamingTests(streamingTest: any, options: MarkdownOptions): string {
    let section = '## üé¨ ÊµÅÂ™í‰ΩìËß£ÈîÅÊµãËØï\n\n'

    if (streamingTest.regionRestrictionCheck.services.length > 0) {
        section += '| ÊúçÂä° | IPv4 | IPv6 |\n'
        section += '| --- | --- | --- |\n'

        for (const service of streamingTest.regionRestrictionCheck.services) {
            section += `| ${service.name} | ${service.ipv4Status} | ${service.ipv6Status} |\n`
        }
        section += '\n'
    }

    if (streamingTest.commonMediaTests.tiktokRegion) {
        if (options.useObsidianCallouts) {
            section += `> [!info] TikTok Ëß£ÈîÅ‰ø°ÊÅØ\n`
            section += `> **TikTok Region:** ${streamingTest.commonMediaTests.tiktokRegion}\n\n`
        } else {
            section += `**TikTok Region:** ${streamingTest.commonMediaTests.tiktokRegion}\n\n`
        }
    }

    return section
}

/**
 * ÁîüÊàêÁΩëÁªúÊµãËØïÈÉ®ÂàÜ
 */
function generateNetworkTests(result: VpsTestResult, options: MarkdownOptions): string {
    let section = '## üåê ÁΩëÁªúÊµãËØï\n\n'

    // IPË¥®ÈáèÊ£ÄÊµã
    section += '### IP Ë¥®ÈáèÊ£ÄÊµã\n\n'
    section += generateIpQualitySection(result.ipQualityTest, options)

    // ÈÇÆ‰ª∂Á´ØÂè£Ê£ÄÊµã
    section += '### ÈÇÆ‰ª∂Á´ØÂè£Ê£ÄÊµã\n\n'
    section += generateEmailPortSection(result.emailPortTest, options)

    // ‰∏âÁΩëÂõûÁ®ã
    section += '### ‰∏âÁΩëÂõûÁ®ã\n\n'
    section += generateNetworkReturnSection(result.networkReturnTest, options)

    // ÂõûÁ®ãË∑ØÁî±
    section += '### ÂõûÁ®ãË∑ØÁî±\n\n'
    section += generateRouteSection(result.routeTest, options)

    return section
}

/**
 * ÁîüÊàêIPË¥®ÈáèÊ£ÄÊµãÈÉ®ÂàÜ
 */
function generateIpQualitySection(ipQualityTest: any, options: MarkdownOptions): string {
    let section = ''

    // IPv4ÈÉ®ÂàÜ
    section += '#### IPv4\n\n'
    section += '| ÊåáÊ†á | ÂÄº | ËØÑÁ∫ß |\n'
    section += '| --- | --- | --- |\n'
    section += `| Â£∞Ë™â(Ë∂äÈ´òË∂äÂ•Ω) | ${ipQualityTest.ipv4.reputation.value} | ${ipQualityTest.ipv4.reputation.rating.emoji} ${ipQualityTest.ipv4.reputation.rating.description} |\n`
    section += `| ‰ø°‰ªªÂæóÂàÜ(Ë∂äÈ´òË∂äÂ•Ω) | ${ipQualityTest.ipv4.trustScore.value} | ${ipQualityTest.ipv4.trustScore.rating.emoji} ${ipQualityTest.ipv4.trustScore.rating.description} |\n`
    section += `| VPNÂæóÂàÜ(Ë∂ä‰ΩéË∂äÂ•Ω) | ${ipQualityTest.ipv4.vpnScore.value} | ${ipQualityTest.ipv4.vpnScore.rating.emoji} ${ipQualityTest.ipv4.vpnScore.rating.description} |\n`
    section += `| ‰ª£ÁêÜÂæóÂàÜ(Ë∂ä‰ΩéË∂äÂ•Ω) | ${ipQualityTest.ipv4.proxyScore.value} | ${ipQualityTest.ipv4.proxyScore.rating.emoji} ${ipQualityTest.ipv4.proxyScore.rating.description} |\n`
    section += `| Â®ÅËÉÅÂæóÂàÜ(Ë∂ä‰ΩéË∂äÂ•Ω) | ${ipQualityTest.ipv4.threatScore.value} | ${ipQualityTest.ipv4.threatScore.rating.emoji} ${ipQualityTest.ipv4.threatScore.rating.description} |\n`
    section += `| Ê¨∫ËØàÂæóÂàÜ(Ë∂ä‰ΩéË∂äÂ•Ω) | ${ipQualityTest.ipv4.fraudScore.value} | ${ipQualityTest.ipv4.fraudScore.rating.emoji} ${ipQualityTest.ipv4.fraudScore.rating.description} |\n`
    section += `| Êª•Áî®ÂæóÂàÜ(Ë∂ä‰ΩéË∂äÂ•Ω) | ${ipQualityTest.ipv4.abuseScore.value} | ${ipQualityTest.ipv4.abuseScore.rating.emoji} ${ipQualityTest.ipv4.abuseScore.rating.description} |\n`
    section += `| Â®ÅËÉÅÁ∫ßÂà´ | ${ipQualityTest.ipv4.threatLevel.value} | ${ipQualityTest.ipv4.threatLevel.rating.emoji} ${ipQualityTest.ipv4.threatLevel.rating.description} |\n\n`

    // IPv6ÈÉ®ÂàÜ
    section += '#### IPv6\n\n'
    section += '| ÊåáÊ†á | ÂÄº | ËØÑÁ∫ß |\n'
    section += '| --- | --- | --- |\n'
    section += `| Ê¨∫ËØàÂæóÂàÜ(Ë∂ä‰ΩéË∂äÂ•Ω) | ${ipQualityTest.ipv6.fraudScore.value} | ${ipQualityTest.ipv6.fraudScore.rating.emoji} ${ipQualityTest.ipv6.fraudScore.rating.description} |\n`
    section += `| Êª•Áî®ÂæóÂàÜ(Ë∂ä‰ΩéË∂äÂ•Ω) | ${ipQualityTest.ipv6.abuseScore.value} | ${ipQualityTest.ipv6.abuseScore.rating.emoji} ${ipQualityTest.ipv6.abuseScore.rating.description} |\n`
    section += `| ASNÊª•Áî®ÂæóÂàÜ(Ë∂ä‰ΩéË∂äÂ•Ω) | ${ipQualityTest.ipv6.asnAbuseScore.value} (${ipQualityTest.ipv6.asnAbuseScore.description}) | ${ipQualityTest.ipv6.asnAbuseScore.rating.emoji} ${ipQualityTest.ipv6.asnAbuseScore.rating.description} |\n`
    section += `| ÂÖ¨Âè∏Êª•Áî®ÂæóÂàÜ(Ë∂ä‰ΩéË∂äÂ•Ω) | ${ipQualityTest.ipv6.companyAbuseScore.value} (${ipQualityTest.ipv6.companyAbuseScore.description}) | ${ipQualityTest.ipv6.companyAbuseScore.rating.emoji} ${ipQualityTest.ipv6.companyAbuseScore.rating.description} |\n`
    section += `| Â®ÅËÉÅÁ∫ßÂà´ | ${ipQualityTest.ipv6.threatLevel.value} | ${ipQualityTest.ipv6.threatLevel.rating.emoji} ${ipQualityTest.ipv6.threatLevel.rating.description} |\n\n`

    // GoogleÊêúÁ¥¢ÂèØË°åÊÄß
    section += `**GoogleÊêúÁ¥¢ÂèØË°åÊÄßÔºö** ${ipQualityTest.googleSearchViability ? '‚úÖ ÂèØÁî®' : '‚ùå ‰∏çÂèØÁî®'}\n\n`

    return section
}

/**
 * ÁîüÊàêÈÇÆ‰ª∂Á´ØÂè£Ê£ÄÊµãÈÉ®ÂàÜ
 */
function generateEmailPortSection(emailPortTest: any, options: MarkdownOptions): string {
    let section = ''

    if (emailPortTest.platforms.length > 0) {
        section += '| Âπ≥Âè∞ | SMTP | SMTPS | POP3 | POP3S | IMAP | IMAPS |\n'
        section += '| --- | --- | --- | --- | --- | --- | --- |\n'

        for (const platform of emailPortTest.platforms) {
            section += `| ${platform.name} | ${platform.smtp ? '‚úÖ' : '‚ùå'} | ${platform.smtps ? '‚úÖ' : '‚ùå'} | `
            section += `${platform.pop3 ? '‚úÖ' : '‚ùå'} | ${platform.pop3s ? '‚úÖ' : '‚ùå'} | `
            section += `${platform.imap ? '‚úÖ' : '‚ùå'} | ${platform.imaps ? '‚úÖ' : '‚ùå'} |\n`
        }
        section += '\n'
    }

    return section
}

/**
 * ÁîüÊàê‰∏âÁΩëÂõûÁ®ãÈÉ®ÂàÜ
 */
function generateNetworkReturnSection(networkReturnTest: any, options: MarkdownOptions): string {


    let section = ''

    if (networkReturnTest.telecom.length > 0) {
        section += '„ÄêÁîµ‰ø°ÂõûÁ®ã„Äë\n'
        for (const entry of networkReturnTest.telecom) {
            section += `${entry}\n`
        }
        section += '\n'
    }

    if (networkReturnTest.unicom.length > 0) {
        section += '„ÄêËÅîÈÄöÂõûÁ®ã„Äë\n'
        for (const entry of networkReturnTest.unicom) {
            section += `${entry}\n`
        }
        section += '\n'
    }

    if (networkReturnTest.mobile.length > 0) {
        section += '„ÄêÁßªÂä®ÂõûÁ®ã„Äë\n'
        for (const entry of networkReturnTest.mobile) {
            section += `${entry}\n`
        }
    }

    return section
}

/**
 * ÁîüÊàêÂõûÁ®ãË∑ØÁî±ÈÉ®ÂàÜ
 */
function generateRouteSection(routeTest: any, options: MarkdownOptions): string {
    let section = '```\n'

    for (const route of routeTest.routes) {
        section += `${route.destination}\n`
        for (const hop of route.hops) {
            section += `${hop}\n`
        }
        section += '\n'
    }

    section += '```\n\n'
    return section
}

/**
 * ÁîüÊàêÈÄüÂ∫¶ÊµãËØïÈÉ®ÂàÜ
 */
function generateSpeedTests(speedTest: any, options: MarkdownOptions): string {
    let section = '## ‚ö° ÈÄüÂ∫¶ÊµãËØï\n\n'

    if (speedTest.nodes.length > 0) {
        section += '| ‰ΩçÁΩÆ | ‰∏ä‰º†ÈÄüÂ∫¶ | ‰∏ãËΩΩÈÄüÂ∫¶ | Âª∂Ëøü | ‰∏¢ÂåÖÁéá |\n'
        section += '| --- | --- | --- | --- | --- |\n'

        for (const node of speedTest.nodes) {
            section += `| ${node.location} | ${node.uploadSpeed} | ${node.downloadSpeed} | ${node.latency} | ${node.packetLoss} |\n`
        }
        section += '\n'
    }

    return section
}

/**
 * ÁîüÊàêÈ°µËÑö
 */
function generateFooter(result: VpsTestResult, options: MarkdownOptions): string {
    let footer = '---\n\n'

    if (options.useObsidianCallouts) {
        footer += `> [!note] Êä•ÂëäÁîüÊàê‰ø°ÊÅØ\n`
        footer += `> Êú¨Êä•ÂëäÁî± [VPS-Spectra](https://github.com/vps-spectra/vps-spectra) Ëá™Âä®ÁîüÊàê\n`
        footer += `> ÁîüÊàêÊó∂Èó¥Ôºö${new Date().toLocaleString('zh-CN')}\n\n`
    } else {
        footer += `*Êú¨Êä•ÂëäÁî± [VPS-Spectra](https://github.com/vps-spectra/vps-spectra) Ëá™Âä®ÁîüÊàê*\n`
        footer += `*ÁîüÊàêÊó∂Èó¥Ôºö${new Date().toLocaleString('zh-CN')}*\n\n`
    }

    return footer
}

/**
 * ÁîüÊàêËØÑÁ∫ßcallout
 */
function generateRatingCallout(rating: RatingResult, title: string, options: MarkdownOptions): string {
    if (!options.useObsidianCallouts) {
        return `**${title}Ôºö** ${rating.emoji} ${rating.description}\n\n`
    }

    const calloutType = getCalloutType(rating.level)
    return `> [!${calloutType}] ${title}\n> ${rating.emoji} **${rating.description}**\n\n`
}

/**
 * ÁîüÊàêÂÜÖÂ≠òÊÄßËÉΩcallout
 */
function generateMemoryPerformanceCallout(memoryTest: any, avgRating: any, options: MarkdownOptions): string {
    if (!options.useObsidianCallouts) return ''

    const readSpeed = memoryTest.singleThreadRead.speed
    const writeSpeed = memoryTest.singleThreadWrite.speed

    let message = ''
    if (readSpeed < 10240 || writeSpeed < 10240) {
        message = 'Ê£ÄÊµãÂà∞ÂÜÖÂ≠òÊÄßËÉΩËæÉ‰ΩéÔºåÂèØËÉΩÂ≠òÂú®Ë∂ÖÂîÆÊàñËµÑÊ∫êÈôêÂà∂ÊÉÖÂÜµ'
    } else if (readSpeed > 50000 && writeSpeed > 20000) {
        message = 'ÂÜÖÂ≠òÊÄßËÉΩ‰ºòÂºÇÔºåËØªÂÜôÈÄüÂ∫¶Ë°®Áé∞Âá∫Ëâ≤'
    } else {
        message = 'ÂÜÖÂ≠òÊÄßËÉΩË°®Áé∞Ê≠£Â∏∏'
    }

    const calloutType = getCalloutType(avgRating.level)
    return `> [!${calloutType}] ÂÜÖÂ≠òÊÄßËÉΩÂàÜÊûê\n> ${message}\n\n`
}

/**
 * Ëé∑ÂèñcalloutÁ±ªÂûã
 */
function getCalloutType(level: string): string {
    switch (level) {
        case 'excellent':
            return 'success'
        case 'good':
            return 'info'
        case 'average':
            return 'warning'
        case 'poor':
            return 'danger'
        default:
            return 'note'
    }
}

/**
 * ËÆ°ÁÆóÂπ≥ÂùáËØÑÁ∫ß
 */
function getAverageRating(ratings: RatingResult[]): RatingResult {
    const levels = ['poor', 'average', 'good', 'excellent']
    const avgIndex = Math.round(
        ratings.reduce((sum, rating) => sum + levels.indexOf(rating.level), 0) / ratings.length
    )

    return {
        level: levels[avgIndex] as any,
        description: 'Âπ≥Âùá',
        color: '#666',
        emoji: 'üìä'
    }
}